// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	qb "github.com/antibomberman/qb"
	mock "github.com/stretchr/testify/mock"

	slog "log/slog"

	time "time"
)

// QueryBuilderInterface is an autogenerated mock type for the QueryBuilderInterface type
type QueryBuilderInterface struct {
	mock.Mock
}

// Begin provides a mock function with no fields
func (_m *QueryBuilderInterface) Begin() (*qb.Transaction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *qb.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() (*qb.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *qb.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qb.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginContext provides a mock function with given fields: ctx
func (_m *QueryBuilderInterface) BeginContext(ctx context.Context) (*qb.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginContext")
	}

	var r0 *qb.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*qb.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *qb.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qb.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Debug provides a mock function with given fields: start, query, args
func (_m *QueryBuilderInterface) Debug(start time.Time, query string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, start, query)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: start, query, args
func (_m *QueryBuilderInterface) Error(start time.Time, query string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, start, query)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// GetDB provides a mock function with no fields
func (_m *QueryBuilderInterface) GetDB() qb.DBInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 qb.DBInterface
	if rf, ok := ret.Get(0).(func() qb.DBInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(qb.DBInterface)
		}
	}

	return r0
}

// Info provides a mock function with given fields: start, query, args
func (_m *QueryBuilderInterface) Info(start time.Time, query string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, start, query)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Query provides a mock function with given fields: table
func (_m *QueryBuilderInterface) Query(table string) qb.BuilderInterface {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 qb.BuilderInterface
	if rf, ok := ret.Get(0).(func(string) qb.BuilderInterface); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(qb.BuilderInterface)
		}
	}

	return r0
}

// Raw provides a mock function with given fields: query, args
func (_m *QueryBuilderInterface) Raw(query string, args ...interface{}) *qb.RawQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Raw")
	}

	var r0 *qb.RawQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *qb.RawQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qb.RawQuery)
		}
	}

	return r0
}

// SetLogger provides a mock function with given fields: logger
func (_m *QueryBuilderInterface) SetLogger(logger *slog.Logger) {
	_m.Called(logger)
}

// Transaction provides a mock function with given fields: fn
func (_m *QueryBuilderInterface) Transaction(fn func(*qb.Transaction) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*qb.Transaction) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionContext provides a mock function with given fields: ctx, fn
func (_m *QueryBuilderInterface) TransactionContext(ctx context.Context, fn func(*qb.Transaction) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for TransactionContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*qb.Transaction) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Warn provides a mock function with given fields: start, query, args
func (_m *QueryBuilderInterface) Warn(start time.Time, query string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, start, query)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// NewQueryBuilderInterface creates a new instance of QueryBuilderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryBuilderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryBuilderInterface {
	mock := &QueryBuilderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
